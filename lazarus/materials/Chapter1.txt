Hash Table is a data structure that maps keys to values for highly efficient lookup.

In a simple implementation we use an array of linked list & hashcode function.
To insert a key-value pair we do the following.

1. First compute key's hashcode, which will usually be an int or long. Note that two different key's can have same hashcode.
2. Map the hashcode to an index in array. This could be done with something like  hash(key) % array_length.
    Two different hashcode could ofcourse map to the same index.
3. At this index there is linked list of keys & values. Store the key & value at this index. 
    We must use linkedlist because of collision.  You can have two different keys with same hashcode or two different hashcodes
    that maps to same index.

To retrieve the value pair by its key, you repeat this process. Compute hascode from key and then compute index from 
hashcode. Then search through the linked list for the value with this key.

If collision is very high, then worst case runtime is O(N). N is nulber of keys.
If collision is kept minimum, lookup time is O(1).

HashMap can be implmented using balanced binary search tree. O(log N) lookup time.
Uses less space since no longer huge array allocation is needed.
Can iterate through map in order.